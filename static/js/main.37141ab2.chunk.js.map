{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","state","showingDetails","eventDetails","setState","event","this","props","className","summary","dateTime","timeZone","location","onClick","Component","EventList","events","map","id","CitySearch","query","suggestions","handleInputChanged","value","target","locations","filter","toUpperCase","indexOf","handleItemClicked","suggestion","type","onChange","NumberOfEvents","App","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.37141ab2.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Event extends Component {\n    state = {\n        showingDetails: false\n    }\n\n    eventDetails = () => {\n        const showingDetails = this.state.showingDetails;\n        if (showingDetails === false) {\n            this.setState({\n                showingDetails: true\n            })\n        } else {\n            this.setState({\n                showingDetails: false\n            })\n        }\n    };\n\n    render() {\n        const { event } = this.props;\n        return <div className=\"event-container\">\n            <h1 className=\"event-summary\">{event.summary}</h1>\n            <p className=\"event-date\">{event.dateTime}</p>\n            <p className=\"event-timezone\">{event.timeZone}</p>\n            <p className=\"event-location\">{event.location}</p>\n            {this.state.showingDetails ? (<div />) : (<button className=\"show-hide\" onClick={this.eventDetails}>See Details</button>)}\n            {this.state.showingDetails ? (<div className=\"about-event\" />) : (<div />)}\n        </div>\n    }\n}\n\nexport default Event;","\nimport React, { Component } from 'react';\nimport Event from './Event';\n\nclass EventList extends Component {\n    render() {\n        const { events } = this.props;\n        return (\n            <ul className=\"EventList\">\n                {events.map(event =>\n                    <li key={event.id}>\n                        <Event event={event} />\n                    </li>\n                )}\n            </ul>\n        );\n    }\n}\n\nexport default EventList;","import React, { Component } from 'react';\n\nclass CitySearch extends Component {\n    state = {\n        query: '',\n        suggestions: []\n    };\n    handleInputChanged = (event) => {\n        const value = event.target.value;\n        const suggestions = this.props.locations.filter((location) => {\n            return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\n        });\n        this.setState({\n            query: value,\n            suggestions\n        });\n    };\n\n    handleItemClicked = (suggestion) => {\n        this.setState({\n            query: suggestion\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"CitySearch\">\n                <input type=\"text\" className=\"city\" value={this.state.query} onChange={this.handleInputChanged} />\n                <ul className=\"suggestions\">\n                    {this.state.suggestions.map((suggestion) => (\n                        <li key={suggestion} onClick={() => this.handleItemClicked(suggestion)} >{suggestion}</li>\n                    ))}\n                    <li key='all'>\n                        <b>See all cities</b>\n                    </li>\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default CitySearch;","import { times } from 'lodash';\nimport React, { Component } from 'react';\n\nclass NumberOfEvents extends Component {\n    state = {\n        query: 32\n    };\n\n    handleInputChanged = (event) => {\n        const value = event.target.value;\n        this.setState({\n            query: value\n        })\n    }\n    render() {\n        return (\n            <div className=\"number-of-events\">\n                <input className=\"events-number\" type=\"text\" value={this.state.query} onChange={this.handleInputChanged} />\n            </div>\n        )\n    }\n}\n\nexport default NumberOfEvents;","import React, { Component } from 'react';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <CitySearch />\n        <NumberOfEvents />\n        <EventList />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}